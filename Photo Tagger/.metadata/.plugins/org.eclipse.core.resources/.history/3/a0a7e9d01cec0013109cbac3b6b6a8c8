
//Imports are listed in full to show what's being used
//could just import javax.swing.* and java.awt.* etc..
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.JComboBox;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JList;

import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;

import org.apache.sanselan.ImageReadException;
import org.apache.sanselan.ImageWriteException;
import org.apache.sanselan.Sanselan;
import org.apache.sanselan.common.IImageMetadata;
import org.apache.sanselan.formats.jpeg.JpegImageMetadata;
import org.apache.sanselan.formats.jpeg.exifRewrite.ExifRewriter;
import org.apache.sanselan.formats.tiff.TiffImageMetadata;
import org.apache.sanselan.formats.tiff.constants.TiffConstants;
import org.apache.sanselan.formats.tiff.write.TiffOutputDirectory;
import org.apache.sanselan.formats.tiff.write.TiffOutputField;
import org.apache.sanselan.formats.tiff.write.TiffOutputSet;
public class PhotoTaggerGUI {
	
	public static void main(String[] args) {    
        new PhotoTaggerGUI();
    }

	public PhotoTaggerGUI() {
        
		//Set up frame
		final JFrame guiFrame = new JFrame();
		guiFrame.setTitle("Photo Tagger");
		guiFrame.setSize(800, 800);
		guiFrame.setLocationRelativeTo(null);
		guiFrame.setLayout(new FlowLayout());
		
		//Set up disk location
		JPanel diskPanel = new JPanel();
		JLabel diskLabel = new JLabel("Disk Location:");
		JButton dirButton = new JButton("Directory");
		final JLabel dirLabel = new JLabel(new java.io.File(".").getAbsolutePath());
		//Set up action listeners
		dirButton.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent event){
            	//Create a file Chooser
            	JFileChooser dirChooser = new JFileChooser();
            	dirChooser.setCurrentDirectory(new java.io.File(dirLabel.getText()));
            	dirChooser.setDialogTitle("Choose Directory");
            	dirChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            	dirChooser.setAcceptAllFileFilterUsed(false);
            	dirChooser.showOpenDialog(guiFrame);
            	//Get the direcotry and save it
            	dirLabel.setText(dirChooser.getS.getAbsolutePath());
            	
            }
        });
		//Add to panel
		diskPanel.add(diskLabel);
		diskPanel.add(dirButton);
		diskPanel.add(dirLabel);
		
		//Set up  name
		JPanel namePanel = new JPanel();
		JLabel nameLabel = new JLabel("Name:");
		//Add to panel
		namePanel.add(nameLabel);

		//Set up device name
		JPanel deviceNamePanel = new JPanel();
		JLabel deviceNameLabel = new JLabel("Device Name:");
		//Add to panel
		deviceNamePanel.add(deviceNameLabel);

		//Set up time interval
		JPanel timePanel = new JPanel();
		JLabel timeLabel = new JLabel("Time Interval:");
		//Add to panel
		timePanel.add(timeLabel);

		//Set up start button
		JPanel startPanel = new JPanel();
		JButton startButton = new JButton("Start");
		//Set up action listener
		startButton.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent event){
            	File[] files = new File(dirLabel.getText()).listFiles();
            	showFiles(files);
            }
        });
		//Add to panel
		startPanel.add(startButton);

		//Set up frame
		guiFrame.add(diskPanel);
		guiFrame.add(namePanel);
		guiFrame.add(deviceNamePanel);
		guiFrame.add(timePanel);
		guiFrame.add(startPanel);
		
		//make sure the JFrame is visible
        guiFrame.setVisible(true);
	
	}
	
	public static void showFiles(File[] files) {
	    for (File file : files) {
	        if (file.isDirectory()) {
	            showFiles(file.listFiles()); // Calls same method again.
	        } else {
	            System.out.println("File: " + file.getName());
            	if (file.getName().contains("JPG")){
		            try {
			            	setExifGPSTag(file, file);
			        } catch (ImageReadException | ImageWriteException | IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
            	}
	        }
	    }
	}
	
    public static void setExifGPSTag(final File jpegImageFile, final File dst) throws IOException, ImageReadException, ImageWriteException {
        OutputStream os = null;
        try
        {
            TiffOutputSet outputSet = null;
 
            // note that metadata might be null if no metadata is found.
            IImageMetadata metadata = Sanselan.getMetadata(jpegImageFile);
            JpegImageMetadata jpegMetadata = (JpegImageMetadata) metadata;
            if (null != jpegMetadata)
            {
                // note that exif might be null if no Exif metadata is found.
                TiffImageMetadata exif = jpegMetadata.getExif();
 
                if (null != exif)
                {
                    // TiffImageMetadata class is immutable (read-only).
                    // TiffOutputSet class represents the Exif data to write.
                    //
                    // Usually, we want to update existing Exif metadata by
                    // changing
                    // the values of a few fields, or adding a field.
                    // In these cases, it is easiest to use getOutputSet() to
                    // start with a "copy" of the fields read from the image.
                    outputSet = exif.getOutputSet();
                }
            }
 
            // if file does not contain any exif metadata, we create an empty
            // set of exif metadata. Otherwise, we keep all of the other
            // existing tags.
            if (null == outputSet)
                outputSet = new TiffOutputSet();
 
            {
                // Example of how to add a field/tag to the output set.
                //
                // Note that you should first remove the field/tag if it already
                // exists in this directory, or you may end up with duplicate
                // tags. See above.
                //
                // Certain fields/tags are expected in certain Exif directories;
                // Others can occur in more than one directory (and often have a
                // different meaning in different directories).
                //
                // TagInfo constants often contain a description of what
                // directories are associated with a given tag.
                //
                // see
                // org.apache.sanselan.formats.tiff.constants.AllTagConstants
                //
                TiffOutputField aperture = TiffOutputField.create(
                        TiffConstants.EXIF_TAG_APERTURE_VALUE,
                        outputSet.byteOrder, new Double(0.3));
                TiffOutputDirectory exifDirectory = outputSet
                        .getOrCreateExifDirectory();
                // make sure to remove old value if present (this method will
                // not fail if the tag does not exist).
                exifDirectory.removeField(TiffConstants.EXIF_TAG_APERTURE_VALUE);
                exifDirectory.add(aperture);
            }
 
            {
                // Example of how to add/update GPS info to output set.
 
                // New York City
                double longitude = -74.0; // 74 degrees W (in Degrees East)
                double latitude = 40 + 43 / 60.0; // 40 degrees N (in Degrees
                // North)
 
                outputSet.setGPSInDegrees(longitude, latitude);
            }
 
            // printTagValue(jpegMetadata, TiffConstants.TIFF_TAG_DATE_TIME);
 
            //os = new FileOutputStream(dst);
            os = new BufferedOutputStream(os);
 
            new ExifRewriter().updateExifMetadataLossless(jpegImageFile, os,
                    outputSet);
 
            os.close();
            os = null;
        } finally
        {
            if (os != null)
                try
                {
                    os.close();
                } catch (IOException e)
                {
 
                }
        }
    	
	}

}
