import javax.swing.*;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;

import org.apache.commons.imaging.ImageReadException;
import org.apache.commons.imaging.ImageWriteException;
import org.apache.commons.imaging.Imaging;
import org.apache.commons.imaging.common.IImageMetadata;
import org.apache.commons.imaging.common.RationalNumber;
import org.apache.commons.imaging.formats.jpeg.JpegImageMetadata;
import org.apache.commons.imaging.formats.jpeg.exif.ExifRewriter;
import org.apache.commons.imaging.formats.tiff.TiffImageMetadata;
import org.apache.commons.imaging.formats.tiff.constants.ExifTagConstants;
import org.apache.commons.imaging.formats.tiff.write.TiffOutputDirectory;
import org.apache.commons.imaging.formats.tiff.write.TiffOutputSet;
import org.apache.commons.imaging.util.IoUtils;

//Start button panel - starts all other panel
public class photoTaggerGUI extends JPanel implements ActionListener{
	
	//All the panels used
	JPanel directoryPanel;
	JPanel userNamePanel;
	JPanel deviceNamePanel;
	JPanel timerIntervalPanel;
	
	/*
	* main()
	* 
	* parameters: 
	* 	String[] args - default args
	* returns: 
	* 	none
	*
	* beginning of program
	*/
	public static void main(String[] args) {    
        new photoTaggerGUI();
    }

	/*
	* photoTaggerGUI()
	* 
	* parameters: 
	* 	none
	* returns: 
	* 	none
	*
	*constructor - sets up gui for this panel
	*/
	public photoTaggerGUI() {
		//Set up start button
		JButton startButton = new JButton("Start");
		//Create Progress Label
		JLabel progressLabel = new JLabel("Progress:");
		//Create Label with Progress
		JLabel curProgressLabel = new JLabel("");

		//Set up action listener
		startButton.addActionListener(this);
		
		//Add to panel
		this.add(startButton);
		this.add(progressLabel);
		this.add(curProgressLabel);
		
		//Set up rest of gui
		setUpFrame();
	}
	
	/*
	* setUpFrame()
	* 
	* parameters: 
	* 	none
	* returns: 
	* 	none
	*
	* sets up the outer frame
	*/
	public void setUpFrame(){
		//Set up frame
		JFrame guiFrame = new JFrame();
		guiFrame.setTitle("Photo Tagger");
		guiFrame.setSize(800, 800);
		guiFrame.setLocationRelativeTo(null);
		guiFrame.setLayout(new FlowLayout());

		//Get all the panels
		directoryPanel = new directory();
		userNamePanel = new userName();
		deviceNamePanel = new deviceName();
		timerIntervalPanel = new timeInterval();

		//Set up frame
		guiFrame.add(directoryPanel);
		guiFrame.add(userNamePanel);
		guiFrame.add(deviceNamePanel);
		guiFrame.add(timerIntervalPanel);
		guiFrame.add(this);
		
		//make sure the JFrame is visible
        guiFrame.setVisible(true);
	}
	    
    /*
	* actionPerformed()
	*
	* parameters: 
	* 	ActionEvent arg0 - default args
	* returns: 
	* 	none
	* 
	* run the program
	*/
	@Override
	public void actionPerformed(ActionEvent e) {
		//Get the directory name
		String directoryName = directoryPanel.getName();
		
		//Go through all the files in that directory
		File[] files = new File(directoryName).listFiles();
    	showFiles(files);
	}

	/*
	* showFiles()
	*
	* parameters: 
	* 	File[] files - set of files to examine
	* returns: 
	* 	none
	* 
	* run the program
	*/
	public static void showFiles(File[] files) {
		//Go through all files in current directory
	    for (File file : files) {
	    	
	    	//Examine files
	        if (file.isDirectory()) {	//If the file is a directory, rerun on that directory
	            showFiles(file.listFiles()); 
	        }else {		//if is a file
	        	
	        	//If it is a jpeg
            	if (file.getName().contains("JPG")){
            		
            		//Try to add gps coordinates
		            try {
		            	String originalPath = file.getAbsolutePath() ;
		            	File dst = new File(file.getAbsolutePath() + "copy");
			            setExifGPSTag(file, dst);
			            file.delete();
			            File dstRename = new File(originalPath);
			            dst.renameTo(dstRename);
			        } catch (ImageReadException | ImageWriteException | IOException e) {
						e.printStackTrace();
					}
		            
            	}
            	
	        }
	        
	    }
	    
	}
	
	/*
	* actionPerformed()
	*
	* parameters: 
	* 	ActionEvent arg0 - default args
	* returns: 
	* 	none
	* 
	* run the program
	*/
    public static void setExifGPSTag(final File jpegImageFile, final File dst) throws IOException, ImageReadException, ImageWriteException {
    	OutputStream os = null;
        boolean canThrow = false;
        try {
            TiffOutputSet outputSet = null;

            // note that metadata might be null if no metadata is found.
            final IImageMetadata metadata = Imaging.getMetadata(jpegImageFile);
            final JpegImageMetadata jpegMetadata = (JpegImageMetadata) metadata;
            if (null != jpegMetadata) {
                // note that exif might be null if no Exif metadata is found.
                final TiffImageMetadata exif = jpegMetadata.getExif();

                if (null != exif) {
                    outputSet = exif.getOutputSet();
                }
            }

            // if file does not contain any exif metadata, we create an empty
            // set of exif metadata. Otherwise, we keep all of the other
            // existing tags.
            if (null == outputSet) {
                outputSet = new TiffOutputSet();
            }

            {
                // Example of how to add/update GPS info to output set.

                // New York City
                final double longitude = -74.0; // 74 degrees W (in Degrees East)
                final double latitude = 40 + 43 / 60.0; // 40 degrees N (in Degrees
                // North)

                outputSet.setGPSInDegrees(longitude, latitude);
            }

            os = new FileOutputStream(dst);
            os = new BufferedOutputStream(os);

            new ExifRewriter().updateExifMetadataLossless(jpegImageFile, os,
                    outputSet);
            canThrow = true;
        } finally {
            IoUtils.closeQuietly(canThrow, os);
        }
    	
	}

}
